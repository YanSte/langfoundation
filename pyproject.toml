[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[virtualenvs]
create = true
in-project = true

[tool.poetry]
name = "langfoundation"
version = "1.3.0"
description = "langfoundation"
authors = ["Yannick Stephan <stephan.yannick@me.com>"]
readme = "README.md"
packages = [{include = "langfoundation"}]

#################################################################
# Required Dependencies
#################################################################

[tool.poetry.dependencies]
# Python
python = ">=3.9,<4.0"
pydantic = "^2.9.2"

# Lint
mypy = "*"
ruff = "*"

# Langchain
langchain = "^0.3.1"
langchain-core = "^0.3.5"
langgraph = "^0.2.28"
langsmith = "^0.1.86"
langchain-community = "^0.3.1"

# Json
json-repair = "^0.29.4"

# Enum
strenum = "^0.4.15"

# Log
rich = "^13.7.1"

#################################################################
# Test
#################################################################

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.2.2"
pytest-asyncio = "^0.23.6"


[tool.pytest.ini_options]
python_files = "test_*" # all python files that starts with test_
python_classes = "Test*" # all python classes that starts with Test
python_functions = "test_*" # all python functions that starts with test_
testpaths = "tests"
addopts = [
    "--import-mode=importlib",
]

#################################################################
# Lint
#################################################################

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".ipynb",
]
line-length = 140

[tool.ruff.lint]
select = ["E", "F", "W", "T201"]
ignore = []
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = false
combine-as-imports = true
force-sort-within-sections = true
order-by-type = false
lines-after-imports = 2
extra-standard-library = ["typing_extensions"]

[tool.mypy]
# Disable 'strict' mode to allow more lenient type checking, enabling more control
# over individual options rather than using a bundled strict configuration.
strict = false

# Exclude specific directories and all Jupyter notebook files from type checking.
# ^ indicates the start of the path, and \\.ipynb$ matches any files with the .ipynb extension.
exclude = '''
^notebooks/
^examples/
^example/
^experiments/
\.ipynb$
'''

# General Mypy settings my less strict

# Check the function body of untyped functions as if they were fully typed.
check_untyped_defs = true

# Prohibit calls to functions that lack type annotations.
disallow_untyped_calls = true

# Require type annotations for all function and method definitions.
disallow_untyped_defs = true

# Prohibit incomplete type annotations in function signatures. For example,
# `def func(x):` would raise an error if `disallow_incomplete_defs` is true.
disallow_incomplete_defs = true

# Silently ignore missing imports for third-party libraries that might not have
# type information. This is helpful for avoiding unnecessary errors from
# libraries without type stubs.
ignore_missing_imports = true

# Show error codes alongside error messages for easier debugging and filtering.
show_error_codes = true

# Enable strict equality checking, ensuring that `==` and `!=` checks are only performed
# between comparable types, reducing the chances of accidental type mismatches.
strict_equality = true

# Warn about redundant casts, such as `x = cast(int, 5)` where the cast is unnecessary.
warn_redundant_casts = true

# Warn when Mypy detects unreachable code, for example, code after a return statement.
warn_unreachable = true

# Warn when configuration options are unused, ensuring that no settings are
# incorrectly specified or ignored in the configuration file.
warn_unused_configs = true

# Suppress warnings for unused `# type: ignore` comments in the code.
warn_unused_ignores = false

# Prevent the implicit re-export of imported symbols in `__init__.py` files.
# This ensures that all imports must be explicitly re-exported using `__all__` or
# another mechanism, improving clarity about what symbols are public.
no_implicit_reexport = true

# Optional and None-specific settings

# Enable strict optional checking, which treats all `Optional` types as non-implicit.
# This ensures that `Optional[X]` and `X` are treated distinctly, and `None` values
# must be explicitly handled.
strict_optional = true

# Enforce that no `Optional` types are assumed implicitly, requiring you to be explicit
# when a value can be `None`. Without this, a value that can be `None` might be
# inferred to have type `Optional` when not annotated as such.
no_implicit_optional = true

# Decorators that aren't typed themselves (i.e., those without annotations)
# cannot be applied to typed functions, ensuring that all function signatures
# remain strongly typed when decorators are applied.
disallow_untyped_decorators = true

# Miscellaneous settings

# Treat namespace packages (i.e., packages that donâ€™t have an `__init__.py`)
# as valid for import resolution, which can be useful in some project structures.
namespace_packages = true

disable_error_code = [
    "return-value",  # Disables "Incompatible return value type" errors
    "return"         # Disables "Missing return statement" errors
]


